#include <gtest/gtest.h>

#include <genetrail2/core/ConfidenceInterval.h>

#include<vector>
#include<string>
#include<initializer_list>
#include<cmath>

using namespace GeneTrail;

const double TOLERANCE = 0.00001;

constexpr std::initializer_list<double> ai = {1.141665664,1.243662930,0.666136785,0.637102434,-1.788134085,-1.264800743,-0.021225020,1.604713766,0.965202552,0.853881083,1.164675060,0.060027048,-0.391478162,-1.269568149,0.075422959,-1.600843268,-0.384111239,-0.116572511,-0.276810747,0.298338836,0.783744617,-0.797837342,-0.401242683,0.396264831,0.755964886,1.308297486,-0.360367665,-0.345549415,1.185079455,-1.394519259,-0.325742149,-0.234468825,1.314334529,0.429585738,1.740124180,0.258796042,0.240645109,-0.820725363,-2.305057500,1.786827163,0.205547086,-0.383948489,0.297934012,-0.531794216,-0.593270102,-0.360544131,0.235633374,0.004846979,-0.983426560,0.409728433,0.325423046,-1.306942860,-1.198692047,0.158889818,0.367220130,0.390707574,-0.404286372,-0.915498456,-2.667567053,-0.239317691,1.478606401,2.182325003,0.042091606,0.443320214,0.011747473,0.691279070,0.622249971,1.090075586,0.599889084,-0.186703152,0.725176166,-1.395848441,0.031498617,-1.196833079,0.889044186,0.761041053,-1.604763323,0.134206387,-0.466535488,0.120800375,2.270490957,0.415891522,-0.618403673,-0.272215873,-0.968336104,0.269554360,0.273208484,0.546879028,-0.250590807,0.302814812,0.435971268,0.612291148,-1.039250924,1.930260808,-0.921297451,0.850358531,0.367494635,0.979441687,-0.566550215,-0.625285486};
constexpr std::initializer_list<double> bi = {-0.51122182,-0.46844508,-0.15846003,0.51143303,-0.36416355,0.19817024,-0.90740262,-0.03717688,-0.19974630,0.10715238,-1.10314965,-0.68751919,1.28558084,-0.39008652,-0.46380850,-0.51361999,-0.68708059,0.83230670,2.04053938,0.79545524,-0.85785700,0.04824798,-0.68358729,-1.25866146,0.18288047,1.62369181,1.38227050,1.40415018,1.55239901,0.04450219,-0.53726193,-1.01197459,1.99824919,0.06225103,-1.35583742,1.78586422,0.37612668,0.02412520,-0.07516539,-0.22523560,-0.08706769,0.34895610,-1.00897333,0.80124534,-0.31601707,0.10258543,0.60073062,0.71412893,-0.20000847,-0.68234215,0.34630846,-0.08252018,1.14809515,-1.21587893,-0.42741185,0.03500263,0.33685928,0.53452231,0.14149017,-0.93946263,0.93247254,-0.80295048,-0.21571558,0.57463121,-0.72712819,1.98861956,-1.92292045,0.01669563,1.95342300,-1.13687671,-0.79591598,-1.67142548,2.33794135,2.47405840,0.74486412,0.70430295,0.85505711,-0.21346108,-1.26520416,-0.07747352,1.35915594,1.02821174,-0.02962829,0.15600884,-2.32049914,-0.74858688,0.34512975,-0.27306510,-1.07428582,-0.37211339,-0.47858407,0.31651842,-0.33659870,0.10271735,-0.85696723,1.09750923,-1.14712421,1.15421781,-0.66762306,-1.73240403};
constexpr std::initializer_list<double> ci = {0.86862447,-0.49818186,-2.39172259,0.52133719,0.48491106,0.66415685,-1.64892599,1.92615967,1.68585921,0.98966383,0.20442657,-0.69986695,-0.48051463,-0.27440456,-1.54223464,1.36234618,0.77829251,-1.62041631,-0.33754209,-0.53131571,0.21972390,0.71904188,1.28766097,1.23820814,0.95948287,0.10685482,-0.93215100,0.01503795,1.72991189,-1.15197302,-0.95251732,0.97961682,-1.47371819,-0.87372113,-0.38838791,-0.20227628,0.76238877,-0.65658410,-1.10409812,-1.60080398,-0.67283785,0.33310137,0.70806521,-0.85134408,1.64803361,-1.32762765,-1.38251278,0.10100719,-0.58033397,2.39251141,-0.55454100,-1.54523367,0.95170591,-0.73768404,-0.73739621,0.35447929,0.38636460,1.03871407,0.80530692,0.18567891,-1.24965700,-0.01748045,1.62925567,0.32685206,-0.96940917,-0.55375583,0.56217973,-0.60895135,0.87173451,-0.78674074,-0.11949399,0.72205372,-1.05225521,-0.44956548,-0.56460374,-0.16777774,-0.52306370,-1.08197001,0.09633449,0.88798070,-0.64828195,-0.73839738,-1.36878208,-2.06389599,1.43227037,-0.11459629,0.90133761,0.89748647,-0.85115893,-0.55858242,-0.37557779,-1.26946806,1.27884364,0.61889758,0.93939284,1.19493921,-0.99507330,0.59578375,1.42441515,0.81566210};

std::vector<double> a(ai);
std::vector<double> b(bi);
std::vector<double> c(ci);

TEST(ConfidenceInterval, Percentile){
	auto ci1 = confidence_interval<double, std::vector<double>::iterator>::percentile(a.begin(), a.end(), 0.0, 0.1);
	EXPECT_NEAR(std::get<0>(ci1), -1.600843, TOLERANCE);
	EXPECT_NEAR(std::get<1>(ci1), 1.604714, TOLERANCE);
	
	auto ci2 = confidence_interval<double, std::vector<double>::iterator>::percentile(b.begin(), b.end(), 0.0, 0.1);
	EXPECT_NEAR(std::get<0>(ci2), -1.355837, TOLERANCE);
	EXPECT_NEAR(std::get<1>(ci2), 1.953423, TOLERANCE);
	
	auto ci3 = confidence_interval<double, std::vector<double>::iterator>::percentile(c.begin(), c.end(), 0.0, 0.1);
	EXPECT_NEAR(std::get<0>(ci3), -1.600804, TOLERANCE);
	EXPECT_NEAR(std::get<1>(ci3), 1.629256, TOLERANCE);
}
